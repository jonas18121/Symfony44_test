security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt # hashage de mot de passe de l'entité User 
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers: # providers = utilisateur
        in_memory: { memory: null }
        in_database:
            entity:
                class: App\Entity\User
                property: email # faudra chercher l'utilisateur grace au champs email et ensuite vérifie le mot de passe
    firewalls:
        dev: # accès à ces fichiers en developpement
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy     # ce connecter en anonyme

            provider: in_database

            form_login: 
                login_path: security_login
                check_path: security_login

            logout:
                path: security_logout
                target: blog # on va dans la route qui s'appelle blog , après la déconnexion

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
